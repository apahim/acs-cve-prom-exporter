package collector

import (
	"sync"

	"github.com/prometheus/client_golang/prometheus"
)

type CollectorManager struct {
	collectors map[string]*MyCollector
	mutex      sync.Mutex
}

func NewCollectorManager() *CollectorManager {
	return &CollectorManager{
		collectors: make(map[string]*MyCollector),
	}
}

func (m *CollectorManager) AddCollector(id string, collector *MyCollector) {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	m.collectors[id] = collector
}
func (m *CollectorManager) RemoveCollector(id string) {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	delete(m.collectors, id)
}

func (m *CollectorManager) RemoveCollectorReg(id string, reg *prometheus.Registry) {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	collector, exists := m.collectors[id]
	if exists {
		reg.Unregister(collector)
		delete(m.collectors, id)
	}
}

func (m *CollectorManager) RegisterCollectors(reg *prometheus.Registry) {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	for _, collector := range m.collectors {
		reg.Register(collector)
	}
}

func (m *CollectorManager) ListCollectors() []string {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	ids := make([]string, 0, len(m.collectors))
	for id := range m.collectors {
		ids = append(ids, id)
	}
	return ids
}

func (m *CollectorManager) CollectorExists(id string) bool {
	m.mutex.Lock()
	defer m.mutex.Unlock()
	_, exists := m.collectors[id]
	return exists
}

func (m *CollectorManager) Copy() *CollectorManager {
	m.mutex.Lock()
	defer m.mutex.Unlock()

	newManager := NewCollectorManager()
	for id, collector := range m.collectors {
		newManager.collectors[id] = collector // Shallow copy
		// If deep copy is needed, implement deep copy logic here
	}
	return newManager
}
